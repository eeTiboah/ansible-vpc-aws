

- name: Setup VPC
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Import output variables
      include_vars: vars/output_vars

    - name: Import private instance variables
      include_vars: vars/private_instances_setup
    
    - name: Create ec2 key
      ec2_key:
        name: ec2-key
        region: "{{region}}"
      
      register: key_out
    
    - name: Save private key into ec2-key.pem
      copy: 
        content: "{{key_out.key.private_key}}"
        dest: "./ec2-key.pem"
        mode: 0400
      
      when: key_out.changed
    
    - name: Create Security Group for Load Balancer
      ec2_group:
        name: "ELB-SG"
        description: "This is the security group for the Load Balancer"
        vpc_id: "{{vpc_id}}"
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: "{{ip}}"
            rule_desc: allow http
      register: ELBSGout

    - name: Create Security Group for private instances
      ec2_group:
        name: "Private-Instance-SG"
        description: "This is the security group for the private instance"
        vpc_id: "{{vpc_id}}"
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ELBSGout.group_id}}"

          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{bastionsgid}}"
            rule_desc: allow ssh connections
          
      register: EC2SGout

    - name: Update Security Group with own SG id
      ec2_group:
        name: "Private-Instance-SG"
        description: "This is the security group for the private instance"
        vpc_id: "{{vpc_id}}"
        region: "{{region}}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{EC2SGout.group_id}}"
    
    - name: Create first Nginx instance
      ec2_instance:
        name: "Nginx 1 Instance"
        key_name: ec2-key
        vpc_subnet_id: "{{privsub1id}}"
        image_id: "{{nginx_ami}}"
        region: "{{region}}"
        security_group: "{{EC2SGout.group_id}}"
        tags:
          Name: "Nginx Instance"
      register: nginx1ec2out
    
    - name: Create second Nginx instance
      ec2_instance:
        name: "Nginx 2 Instance"
        key_name: ec2-key
        vpc_subnet_id: "{{privsub2id}}"
        image_id: "{{nginx_ami}}"
        region: "{{region}}"
        security_group: "{{EC2SGout.group_id}}"
        tags:
          Name: "Nginx Instance"
      register: nginx2ec2out

  
    - name: Insert first nginx private ip
      lineinfile:
        path: ./vars/output_vars
        line: "nginx1ec2ip: {{nginx1ec2out.instances[0].network_interfaces[0].private_ip_address}}"

    - name: Insert second nginx private ip
      lineinfile:
        path: ./vars/output_vars
        line: "nginx2ec2ip: {{nginx2ec2out.instances[0].network_interfaces[0].private_ip_address}}"

    - local_action:
        module: ec2_elb_lb
        name: "App ELB"
        region: "{{region}}"
        state: "{{state}}"
        instance_ids:
          - nginx1ec2out.instances[0].instance_id
          - nginx2ec2out.instances[0].instance_id
        purge_instance_ids: true
        security_group_ids: "{{EC2SGout.group_id}}"
        subnets:
          - "{{ pubsub1id }}"
          - "{{ pubsub2id }}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
        health_check:
          ping_protocol: http
          ping_port: 80
          ping_path: "/index.html"
          response_timeout: 5
          interval: 30
          healthy_threshold: 2
          unhealthy_threshold: 2

    
    - name: Update inventory file
      blockinfile:
        path: ./inventory
        block: |
          nginx01 ansible_host={{nginx1ec2out.instances[0].network_interfaces[0].private_ip_address}}
          nginx02 ansible_host={{nginx2ec2out.instances[0].network_interfaces[0].private_ip_address}}
          controller ansible_host=127.0.0.1 ansible_connection=local

          [webserver]
          nginx01
          nginx02

          [ec2_stack:children]
          webserver

          [ec2_stack:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=ec2-key.pem
          #ansible_python_interpreter=/usr/bin/python3
